#include <Ethernet2.h>
#include <ArduinoJson.h>
#include "DHT.h"
#define DHTPIN 9 // Тот самый номер пина, о котором упоминалось выше
// Одна из следующих строк закоментирована. Снимите комментарий, если подключаете датчик DHT11 к arduino
DHT dht(DHTPIN, DHT11); //Инициация датчика



#define PIN_DIGITAL_RAIN_SENSOR 6
byte mac[] = {0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0x05};
float vol; 
char server[] = "192.168.2.42";
IPAddress ip(192, 168, 2, 111);
//byte ip[] = {192, 168, 0, 105};
//byte dnsip[] = {192, 168, 0, 1};
//byte gateway[] = {192, 168, 0, 1};
//byte mask[] = {255, 255, 255, 0};

EthernetClient client;
int sensorValue ;
//ThingWorx App key which replaces login credentials)
char appKey[] = "2fc24631-dd3a-4a16-a1de-d6bd727f7658";
// ThingWorx Thing name for which you want to set properties values
char thingName[] = "security";
//Interval of time at which you want the properties values to be sent to TWX server
int timeBetweenRefresh = 1000;
// ThingWorx service that will set values for the properties you need
// See the documentation for this tutorial for more information
char serviceName[] = "fire";

//How many values you will be pushing to Server
#define propertyCount 5
//Initialize Properties Names and Values Arrays
const char* propertyNames[] = {"CO2","drive","water","t","h","but"};
double propertyValues[propertyCount];

// last time you connected to the server, in milliseconds
unsigned long lastConnectionTime = 0;
// timer waiting for the arrival of characters from the server
unsigned long timer_iot_timeout = 0;
// Receive buffer size
#define BUFF_LENGTH 64
const int movPin = 2;

void setup() {
  //shut down the SD Card pins

  pinMode(9,INPUT);
  // start serial port:
  Serial.begin(9600);
  pinMode(movPin, INPUT);
  // start the Ethernet connection:
  Ethernet.begin(mac, ip/*, dnsip, gateway, mask*/);
  pinMode(8,OUTPUT);
  dht.begin();

}

void loop() {

  if (millis() - lastConnectionTime > (unsigned long)timeBetweenRefresh)
    updateServiceValues();
  else
    updateSensorsData();
}

void drive(){

}

void updateSensorsData()
{

  sensorValue = analogRead(A0); 
  vol=(float)sensorValue/1024*5.0;
  // Analog sensors
  propertyValues[0] = vol;
Serial.print(digitalRead(A0));
int val = digitalRead(movPin);
propertyValues[1] = val;
  delay(250);
  sensorValue = digitalRead(PIN_DIGITAL_RAIN_SENSOR); // Считываем данные с цифрового порта
   Serial.print("Digital value: "); 
   Serial.println(sensorValue);
   if (sensorValue){
     propertyValues[2] = 0;
   }
   else{
     propertyValues[2] = 1;
   }
    float h = dht.readHumidity(); //Измеряем влажность
  float t = dht.readTemperature(); //Измеряем температуру
  propertyValues[3] = t;
  propertyValues[4] = h; 

}

void updateServiceValues()
{
  // Connection to server Thingworx
  Serial.println("Connecting to IoT server...");
  if (client.connect(server, 80))
  {
    // Check connection
    if (client.connected())
    {
      // Sending a header of a network packet
      Serial.println("Sending data to IoT server...\n");
      Serial.print("POST /Thingworx/Things/");
      client.print("POST /Thingworx/Things/");
      Serial.print(thingName);
      client.print(thingName);
      Serial.print("/Services/");
      client.print("/Services/");
      Serial.print(serviceName);
      client.print(serviceName);
      Serial.print("?appKey=");
      client.print("?appKey=");
      Serial.print(appKey);
      client.print(appKey);
      Serial.print("&method=post&x-thingworx-session=true");
      client.print("&method=post&x-thingworx-session=true");
      // Sending data from sensors
      for (int idx = 0; idx < propertyCount; idx ++)
      {
        Serial.print("&");
        client.print("&");
        Serial.print(propertyNames[idx]);
        client.print(propertyNames[idx]);
        Serial.print("=");
        client.print("=");
        Serial.print(propertyValues[idx]);
        client.print(propertyValues[idx]);
      }
      // Close package
      Serial.println(" HTTP/1.1");
      client.println(" HTTP/1.1");
      Serial.println("Accept: application/json");
      client.println("Accept: application/json");
      Serial.print("Host: ");
      client.print("Host: ");
      Serial.println(server);
      client.println(server);
      Serial.println("Content-Type: application/json");
      client.println("Content-Type: application/json");
      Serial.println();
      client.println();

      // Waiting for a response from the server
      timer_iot_timeout = millis();
      while ((client.available() == 0) && (millis() < timer_iot_timeout + 5000));

      // Display the response on the server, and if a slow connection, wait for the timeout
      char buff[BUFF_LENGTH] = "";
      int iii = 0;
      bool flagJSON = false;
      timer_iot_timeout = millis();
      while ((millis() < timer_iot_timeout + 100) && (client.connected()))
      {
        while (client.available() > 0)
        {
          char symb = client.read();
          Serial.print(symb);
          if (symb == '{')
          {
            flagJSON = true;
          }
          else if (symb == '}')
          {
            flagJSON = false;
          }
          if (flagJSON == true)
          {
            buff[iii] = symb;
            iii ++;
          }
          timer_iot_timeout = millis();
        }
      }
      buff[iii] = '}';
      buff[iii + 1] = '\0';
      Serial.println(buff);
      // Close connection
      client.stop();

      // Decrypted parameters
      StaticJsonBuffer<BUFF_LENGTH> jsonBuffer;
      JsonObject& json_array = jsonBuffer.parseObject(buff);
      //Service result variable (return JSON)
      int result = json_array["but"];
      Serial.println("Result state:   " + String(result));
      if (result == 1){
         digitalWrite(8, digitalRead(movPin));
      }
      else{
        digitalWrite(8, LOW);
      }
      Serial.println();
     //// if (result ==0){
  //      digitalWrite(LED,LOW);
   //   }
    //  else if (result ==1){
     //   digitalWrite(LED,HIGH);
  //    }
      // Device control
      //controlDevices(result);

      Serial.println("Packet successfully sent!");
      Serial.println();
      lastConnectionTime = millis();
    }
  }
  else {
    // if you didn't get a connection to the server:
    Serial.println("Connection could not be established");
    client.stop();
  }
}
